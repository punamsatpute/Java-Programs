Employee details with SQL

import javax.persistence.*;

@Entity
@Table(name = "employees")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "name")
    private String name;

    @Column(name = "position")
    private String position;

    @Column(name = "salary")
    private double salary;

    // Constructors
    public Employee() {
        // Default constructor required by Hibernate
    }

    public Employee(String name, String position, double salary) {
        this.name = name;
        this.position = position;
        this.salary = salary;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    // toString method for printing Employee details
    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", position='" + position + '\'' +
                ", salary=" + salary +
                '}';
    }
}


import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import java.util.List;

public class HibernateNativeSQLExample {

    private static SessionFactory sessionFactory;

    public static void main(String[] args) {
        try {
            // Create a Hibernate configuration instance and configure
            Configuration configuration = new Configuration().configure();
            configuration.addAnnotatedClass(Employee.class);

            // Create SessionFactory
            sessionFactory = configuration.buildSessionFactory();

            // Get employee details using native SQL query
            List<Employee> employees = getEmployeeDetailsUsingSQL();
            for (Employee employee : employees) {
                System.out.println(employee);
            }
        } finally {
            if (sessionFactory != null) {
                sessionFactory.close();
            }
        }
    }

    private static List<Employee> getEmployeeDetailsUsingSQL() {
        List<Employee> employees = null;
        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();

            // Execute native SQL query to fetch employee details
            String sql = "SELECT * FROM employees"; // Replace with your SQL query
            employees = session.createNativeQuery(sql, Employee.class).getResultList();

            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return employees;
    }
}
